1.3背包、队列、栈

泛型，也叫参数化类型。
	用于指定集合中对象类型。如Stack<Item>,其中Item是一个类型参数，也是一个占位符，可以用String代替Item，指定这是一个存储String对象的Stack。
	在java中创建泛型数组是不允许的，如a = new Item[num];所以需要使用类型转换：a = (Item[]) new Object[num];




自动装箱：原始数据类型转换成封装类型，如int->Integer;
自动拆箱：相反。

迭代：Iterator 
	foreach语句:	
		Stack<String> collection = new Stack<String>();
		...
		for (String s : collection)
		   StdOut.println(s);
	等价于：
		Iterator<String> i = collection.iterator();
		while (i.hasNext()) { 
		   String s = i.next();
		   StdOut.println(s);
		}
 一个可迭代的集合数据类型：	
	 集合类需要import java.util.Iterator;
	 1)集合数据类型必须实现一个iterator()方法并返回一个Iterator对象；
	 	集合数据类需要implements Iterable<Item>,Iterable<Item>接口中包含抽象方法iterator()。
	 	如
	 			public Iterator<Item> iterator()  {
       			 return new ListIterator<Item>(first);  
   				 }

	 2)Iterator类必须包含两个方法：hasNext()（返回一个布尔值）和next()（返回集合中的下一个泛型元素）。  
	 	在实现类中的迭代器时要implements Iterator<Item>，其中有hasNext()和next()两个方法(remove()一般为空)。
	 	 	private class ListIterator<Item> implements Iterator<Item> {
        		private Node<Item> current;

		        public ListIterator(Node<Item> first) {
		            current = first;
		        }

		        public boolean hasNext()  { return current != null;                     }
		        public void remove()      { throw new UnsupportedOperationException();  }

		        public Item next() {
		            if (!hasNext()) throw new NoSuchElementException();
		            Item item = current.item;
		            current = current.next; 
		            return item;
		        }
		    }


背包Bag：不支持从中删除元素的集合数据类型。
	  目的是帮助用例收集元素并迭代遍历所有收集到的元素。（迭代顺序不确定且与用例无关）

队列Queue：先进先出FIFO，有顺序。  如各种排队
	  

栈Stack：有顺序，后进先出LIFO。  如桌子上的文件


1.3.3
链表：是一种递归的数据结构，其中的元素为结点。
	结点node：一个结点包含一个泛型的元素和一个指向另一条链表的引用。
		private static class Node<Item> {
		        private Item item;
		        private Node<Item> next;
		    }

在结构化存储数据集时，链表是数组的一种重要的替代方式。

两种表示对象集合的方式：数组和链表。顺序存储和链式存储。	
	数组：顺序存储。通过索引就可以直接访问任意元素。 在初始化时就需要知道元素的数量。
	链表：链式存储。使用的空间大小和元素数量成正比。 需要通过引用访问任意元素。


可以使用foreach语句循环访问实现了Iterable接口的类。
	特殊：数组没有实现Iterable接口，但是但是支持使用foreach。
		  字符串不行。

1.4 算法分析

幂次法则：T(N)=a*(N^3);

1.4.3 数学模型
	
一个程序运行的总时间主要和两点有关：
	执行每条语句的耗时；----取决于计算机，Java编译器和操作系统。
	执行每条语句的频率；----取决于程序本身和输入。
(1)判断语句的执行频率
	可以采用近似的方法，如一个语句会执行N(N-1)(N-2)次。N(N-1)(N-2)=N^3/6-N^2/2+N/3，当N足够大时，后两项可以忽略，所以N(N-1)(N-2)~N^3/6(约等于)。

	增长的数量级：类似于算法复杂度。
	分类：
		常数级别		1 			 普通语句	如：	两个数相加
		对数级别		logN		 二分策略	如：	二分查找
		线性级别        N 			 循环    	如：	找出最大元素
		线性对数级别	NlogN		 分治		如：	归并排序
		平方级别		N^2 		 双层循环	如：    检查所有元素对
		立方级别		N^3  		 三层循环	如：    检查所有三元组
		指数级别		2^N   		 穷举查找   如：    检查所有子集


得到数学模型：
	1)确定输入模型，定义问题的规模；
	2)识别内循环；
	3)根据内循环中的操作确定成本模型；
	4)对于给定的输入，判断这些操作的执行频率。可能需要数学分析。

如果一个程序有多个方法，分别进行讨论。
